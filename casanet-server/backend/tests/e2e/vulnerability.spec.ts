import { expect } from 'chai';
import * as moment from 'moment';
import { app } from '../../src/app';
import { CalibrateBlSingleton } from '../../src/business-layer/calibrateBl';
import { MinionsBlSingleton } from '../../src/business-layer/minionsBl';
import { RemoteConnectionBlSingleton } from '../../src/business-layer/remoteConnectionBl';
import { TimelineBlSingleton } from '../../src/business-layer/timelineBl';
import { TimeoutBlSingleton } from '../../src/business-layer/timeoutBl';
import { TimingsBlSingleton } from '../../src/business-layer/timingsBl';
import { Configuration } from '../../src/config';
import { User } from '../../src/models/sharedInterfaces';
import { DeepCopy } from '../../src/utilities/deepCopy';
import { validAdminAgent, validUserAgent } from './prepareRoutesSpecTests.spec';

(function initServices() {
  MinionsBlSingleton.initMinionsModule();
  TimelineBlSingleton.initTimelineModule();
  RemoteConnectionBlSingleton.initRemoteConnectionModule();
  TimingsBlSingleton.initTimingModule();
  TimeoutBlSingleton.initTimeoutModule();
  CalibrateBlSingleton.initCalibrateModule();
})();

describe('Test vulnerability specs in API', () => {
  /** Allows test max request rate on specific IP. */
  app.enable('trust proxy');

  describe('RateLimit', () => {
    it('it should denied requests after max limits', async () => {
      for (let i = 0; i < Configuration.requestsLimit.maxRequests; i++) {
        await validAdminAgent
          .get('/API/users/profile')
          .set('X-Forwarded-For', '7.7.7.7')
          .send();
      }
      const response = await validAdminAgent
        .get('/API/users/profile')
        .set('X-Forwarded-For', '7.7.7.7')
        .send();
      expect(response.status).to.be.eql(429);
    }).timeout(moment.duration(10, 'seconds').asMilliseconds());
  });

  describe('sanitizeData', () => {
    it('it should denied requests after max limits', async () => {
      const responseA = await validAdminAgent.get('/API/users/profile').send();
      const userWithXss: User = DeepCopy<User>(responseA.body);
      userWithXss.displayName += '<script>alert("hello XSS")</script>';
      const responseB = await validAdminAgent.put(`/API/users/${userWithXss.email}`).send(userWithXss);
      const responseC = await validAdminAgent.get('/API/users/profile').send();
      expect(responseC.body).to.be.deep.equal(responseA.body);
    });
  });
});
